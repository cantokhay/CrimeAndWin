// <auto-generated />
using System;
using Leadership.Infrastructure.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Leadership.Infrastructure.Migrations
{
    [DbContext(typeof(LeadershipDbContext))]
    [Migration("20250821094916_mig-1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Leadership.Domain.Entities.Leaderboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("GameWorldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeasonal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameWorldId", "SeasonId");

                    b.ToTable("Leaderboards", (string)null);
                });

            modelBuilder.Entity("Leadership.Domain.Entities.LeaderboardEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LeaderboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId", "PlayerId")
                        .IsUnique();

                    b.ToTable("LeaderboardEntries", (string)null);
                });

            modelBuilder.Entity("Leadership.Domain.Entities.LeaderboardEntry", b =>
                {
                    b.HasOne("Leadership.Domain.Entities.Leaderboard", "Leaderboard")
                        .WithMany("Entries")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Leadership.Domain.VOs.Rank", "Rank", b1 =>
                        {
                            b1.Property<Guid>("LeaderboardEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Position")
                                .HasColumnType("int")
                                .HasColumnName("Position");

                            b1.Property<int>("RankPoints")
                                .HasColumnType("int")
                                .HasColumnName("RankPoints");

                            b1.HasKey("LeaderboardEntryId");

                            b1.HasIndex("RankPoints");

                            b1.ToTable("LeaderboardEntries");

                            b1.WithOwner()
                                .HasForeignKey("LeaderboardEntryId");
                        });

                    b.Navigation("Leaderboard");

                    b.Navigation("Rank")
                        .IsRequired();
                });

            modelBuilder.Entity("Leadership.Domain.Entities.Leaderboard", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
