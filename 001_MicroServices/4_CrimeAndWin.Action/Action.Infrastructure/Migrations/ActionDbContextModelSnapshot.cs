// <auto-generated />
using System;
using Action.Infrastructure.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Action.Infrastructure.Migrations
{
    [DbContext(typeof(ActionDbContext))]
    partial class ActionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Action.Domain.Entities.ActionDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ActionDefinitions", (string)null);
                });

            modelBuilder.Entity("Action.Domain.Entities.PlayerActionAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId", "ActionDefinitionId", "AttemptedAtUtc");

                    b.ToTable("PlayerActionAttempts", (string)null);
                });

            modelBuilder.Entity("Action.Domain.Entities.ActionDefinition", b =>
                {
                    b.OwnsOne("Action.Domain.VOs.ActionRequirements", "Requirements", b1 =>
                        {
                            b1.Property<Guid>("ActionDefinitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("EnergyCost")
                                .HasColumnType("int")
                                .HasColumnName("EnergyCost");

                            b1.Property<int>("MinPower")
                                .HasColumnType("int")
                                .HasColumnName("MinPower");

                            b1.HasKey("ActionDefinitionId");

                            b1.ToTable("ActionDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("ActionDefinitionId");
                        });

                    b.OwnsOne("Action.Domain.VOs.ActionRewards", "Rewards", b1 =>
                        {
                            b1.Property<Guid>("ActionDefinitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("ItemDrop")
                                .HasColumnType("bit")
                                .HasColumnName("ItemDrop");

                            b1.Property<decimal>("MoneyGain")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("MoneyGain");

                            b1.Property<int>("PowerGain")
                                .HasColumnType("int")
                                .HasColumnName("PowerGain");

                            b1.HasKey("ActionDefinitionId");

                            b1.ToTable("ActionDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("ActionDefinitionId");
                        });

                    b.Navigation("Requirements")
                        .IsRequired();

                    b.Navigation("Rewards")
                        .IsRequired();
                });

            modelBuilder.Entity("Action.Domain.Entities.PlayerActionAttempt", b =>
                {
                    b.OwnsOne("Action.Domain.VOs.PlayerActionResult", "PlayerActionResults", b1 =>
                        {
                            b1.Property<Guid>("PlayerActionAttemptId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("OutcomeType")
                                .HasColumnType("int")
                                .HasColumnName("OutcomeType");

                            b1.Property<double>("SuccessRate")
                                .HasPrecision(5, 2)
                                .HasColumnType("float(5)")
                                .HasColumnName("SuccessRate");

                            b1.HasKey("PlayerActionAttemptId");

                            b1.ToTable("PlayerActionAttempts");

                            b1.WithOwner()
                                .HasForeignKey("PlayerActionAttemptId");
                        });

                    b.Navigation("PlayerActionResults")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
